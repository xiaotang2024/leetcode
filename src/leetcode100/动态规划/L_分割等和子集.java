package leetcode100.动态规划;

/**
 * 给你一个 只包含正整数 的 非空 数组 nums 。请你判断是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。
 *
 * 输入：nums = [1,5,11,5]
 * 输出：true
 * 解释：数组可以分割成 [1, 5, 5] 和 [11] 。
 */
public class L_分割等和子集 {
    public static void main(String[] args) {
        L_分割等和子集 code = new L_分割等和子集();
        code.canPartition(new int[]{});
    }

    boolean res = false;

    public boolean canPartition(int[] nums) {
        dfs(nums, 0, 0, new int[nums.length]);
        return res;
    }

    public void dfs(int[] nums, int index, int currSum, int[] flag) {
        if (index == nums.length) {
            return;
        }
        for (int i = index; i < nums.length; i++) {
            // 处理节点
            currSum += nums[i];
            flag[i] = 1;
            if (currSum == sum(nums,flag)) {
                res = true;
            }
            // 递归
            dfs(nums, i + 1, currSum, flag);
            // 回溯
            currSum -= nums[i];
            flag[i] = 0;
        }
    }

    public int sum(int[] nums, int[] flag) {
        int res = 0;
        for (int i = 0; i < nums.length; i++) {
            if (flag[i] == 0) {
                res += nums[i];
            }
        }
        return res;
    }
}
